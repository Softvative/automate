// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/infra_proxy/infra_proxy.proto

package infra_proxy

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/components/automate-gateway/api/infra_proxy/request"
	response "github.com/chef/automate/components/automate-gateway/api/infra_proxy/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("components/automate-gateway/api/infra_proxy/infra_proxy.proto", fileDescriptor_4e8539c052e62b29)
}

var fileDescriptor_4e8539c052e62b29 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xbd, 0x4e, 0xfb, 0x30,
	0x1c, 0x54, 0xff, 0x7f, 0x54, 0x24, 0x8f, 0xe6, 0x43, 0x21, 0x94, 0xa5, 0x7b, 0x6d, 0x51, 0xb6,
	0x4a, 0x7c, 0x55, 0x88, 0x8a, 0x09, 0x24, 0x36, 0x16, 0xe4, 0x86, 0x5f, 0x5d, 0x4b, 0x8d, 0x6d,
	0x6c, 0xb7, 0xd0, 0x35, 0x63, 0x57, 0x9e, 0x25, 0x4f, 0xc2, 0x2b, 0xb0, 0x81, 0xc4, 0x2b, 0xa0,
	0x24, 0x2d, 0xa4, 0x6a, 0x0a, 0x4d, 0xb7, 0x48, 0xbf, 0xbb, 0xcb, 0xdd, 0xf9, 0xd0, 0x71, 0xa0,
	0x42, 0xad, 0x24, 0x48, 0x67, 0x29, 0x1b, 0x3a, 0x15, 0x32, 0x07, 0x0d, 0xce, 0x1c, 0x3c, 0xb1,
	0x31, 0x65, 0x5a, 0x50, 0x21, 0x7b, 0x86, 0xdd, 0x6b, 0xa3, 0x9e, 0xc7, 0xf9, 0x6f, 0xa2, 0x8d,
	0x72, 0x0a, 0x1f, 0x04, 0x7d, 0xe8, 0x91, 0x19, 0x91, 0x30, 0x2d, 0x48, 0x0e, 0xe4, 0xd7, 0xb8,
	0x52, 0x7c, 0x00, 0xa9, 0x10, 0x93, 0x52, 0x39, 0xe6, 0x84, 0x92, 0x36, 0x23, 0xfb, 0x27, 0x65,
	0xfe, 0x6d, 0xe0, 0x71, 0x08, 0xd6, 0x51, 0x65, 0xf8, 0x8c, 0x7f, 0xbe, 0x0e, 0xdf, 0x82, 0x19,
	0x81, 0x99, 0x49, 0x9c, 0x96, 0x93, 0xb0, 0x5a, 0x49, 0x0b, 0x79, 0x0f, 0xed, 0xb5, 0x04, 0xe6,
	0x4d, 0x9c, 0x15, 0x6a, 0x18, 0x1d, 0xd0, 0xf4, 0x1e, 0x34, 0x38, 0xc8, 0x86, 0x56, 0x03, 0x11,
	0x8c, 0x97, 0x34, 0x59, 0x46, 0x41, 0xb0, 0x70, 0x51, 0xa1, 0xf9, 0xf1, 0x1f, 0xa1, 0xab, 0xc4,
	0xea, 0x4d, 0xe2, 0x14, 0xbf, 0x57, 0x10, 0xea, 0x80, 0xbb, 0xcd, 0x7c, 0xe2, 0x43, 0xf2, 0xeb,
	0x3b, 0x93, 0x69, 0xb9, 0xe4, 0x87, 0xe2, 0x37, 0xff, 0xa4, 0x64, 0x5d, 0xe4, 0x38, 0xf5, 0x51,
	0x14, 0x7b, 0x3b, 0x68, 0x2b, 0x07, 0x6b, 0x4d, 0x9b, 0x8a, 0x62, 0xaf, 0x8a, 0x37, 0x0c, 0xb0,
	0x87, 0xc9, 0x32, 0xc8, 0x24, 0xf6, 0x7c, 0xec, 0x15, 0x1c, 0x5a, 0x03, 0x61, 0x5d, 0xf4, 0xfa,
	0xf6, 0xf2, 0x6f, 0x17, 0x6f, 0xcf, 0xbd, 0xc7, 0x14, 0x80, 0x3f, 0x2b, 0x68, 0xb3, 0x03, 0xee,
	0xda, 0x70, 0x8b, 0xc9, 0xea, 0x51, 0x13, 0xbc, 0x4f, 0x4b, 0xe4, 0x4c, 0x08, 0xf5, 0xa8, 0xb2,
	0x5a, 0x4a, 0x1f, 0x15, 0x86, 0x49, 0xb6, 0x37, 0x89, 0xbd, 0x1a, 0xf6, 0x17, 0xaf, 0x89, 0x7e,
	0x8b, 0x43, 0x16, 0x76, 0x1f, 0xef, 0x15, 0x85, 0x4d, 0xc7, 0xdb, 0xbe, 0xbc, 0xbb, 0xe0, 0xc2,
	0xf5, 0x87, 0x5d, 0x12, 0xa8, 0x90, 0x26, 0x09, 0xbe, 0x77, 0x43, 0x4b, 0x2c, 0xba, 0x5b, 0x4d,
	0xd7, 0x73, 0xf4, 0x15, 0x00, 0x00, 0xff, 0xff, 0x26, 0x97, 0xf9, 0x1f, 0x47, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InfraProxyClient is the client API for InfraProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfraProxyClient interface {
	GetServers(ctx context.Context, in *request.GetServers, opts ...grpc.CallOption) (*response.GetServers, error)
	GetOrgs(ctx context.Context, in *request.GetOrgs, opts ...grpc.CallOption) (*response.GetOrgs, error)
}

type infraProxyClient struct {
	cc *grpc.ClientConn
}

func NewInfraProxyClient(cc *grpc.ClientConn) InfraProxyClient {
	return &infraProxyClient{cc}
}

func (c *infraProxyClient) GetServers(ctx context.Context, in *request.GetServers, opts ...grpc.CallOption) (*response.GetServers, error) {
	out := new(response.GetServers)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetOrgs(ctx context.Context, in *request.GetOrgs, opts ...grpc.CallOption) (*response.GetOrgs, error) {
	out := new(response.GetOrgs)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetOrgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfraProxyServer is the server API for InfraProxy service.
type InfraProxyServer interface {
	GetServers(context.Context, *request.GetServers) (*response.GetServers, error)
	GetOrgs(context.Context, *request.GetOrgs) (*response.GetOrgs, error)
}

// UnimplementedInfraProxyServer can be embedded to have forward compatible implementations.
type UnimplementedInfraProxyServer struct {
}

func (*UnimplementedInfraProxyServer) GetServers(ctx context.Context, req *request.GetServers) (*response.GetServers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (*UnimplementedInfraProxyServer) GetOrgs(ctx context.Context, req *request.GetOrgs) (*response.GetOrgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgs not implemented")
}

func RegisterInfraProxyServer(s *grpc.Server, srv InfraProxyServer) {
	s.RegisterService(&_InfraProxy_serviceDesc, srv)
}

func _InfraProxy_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetServers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetServers(ctx, req.(*request.GetServers))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetOrgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetOrgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetOrgs(ctx, req.(*request.GetOrgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfraProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.infra_proxy.InfraProxy",
	HandlerType: (*InfraProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServers",
			Handler:    _InfraProxy_GetServers_Handler,
		},
		{
			MethodName: "GetOrgs",
			Handler:    _InfraProxy_GetOrgs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/infra_proxy/infra_proxy.proto",
}
