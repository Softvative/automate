syntax = "proto3";

package chef.automate.api.infra_proxy;
option go_package = "github.com/chef/automate/components/automate-gateway/api/infra_proxy";

import "google/api/annotations.proto";

import "components/automate-gateway/api/infra_proxy/request/orgs.proto";
import "components/automate-gateway/api/infra_proxy/request/servers.proto";

import "components/automate-gateway/api/infra_proxy/response/orgs.proto";
import "components/automate-gateway/api/infra_proxy/response/servers.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

service InfraProxy {
  rpc GetServers (infra_proxy.request.GetServers) returns (infra_proxy.response.GetServers) {
    option (google.api.http).get = "/infra_proxy/servers";
    option (chef.automate.api.policy).resource = "infra_proxy:servers";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "infra_proxy:servers";
    option (chef.automate.api.iam.policy).action = "infra_proxy:servers:list";
  };

  rpc GetOrgs (infra_proxy.request.GetOrgs) returns (infra_proxy.response.GetOrgs) {
    option (google.api.http).get = "/infra_proxy/servers/orgs";
    option (chef.automate.api.policy).resource = "infra_proxy:servers";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "infra_proxy:servers:orgs";
    option (chef.automate.api.iam.policy).action = "infra_proxy:serverOrgs:get";
  };
}
