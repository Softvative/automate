// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/interservice/cfgmgmt/service/cfgmgmt.proto

package service

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/api/interservice/cfgmgmt/request"
	response "github.com/chef/automate/api/interservice/cfgmgmt/response"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("api/interservice/cfgmgmt/service/cfgmgmt.proto", fileDescriptor_2d8f0c4330cc0845)
}

var fileDescriptor_2d8f0c4330cc0845 = []byte{
	// 726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x97, 0x4f, 0x6f, 0x13, 0x3b,
	0x14, 0xc5, 0x95, 0xcd, 0xeb, 0x7b, 0x56, 0x1f, 0x02, 0x4b, 0x6c, 0x2c, 0x96, 0xac, 0xfa, 0x67,
	0xa6, 0x4d, 0x4a, 0x2b, 0x84, 0x40, 0xa2, 0x69, 0x3b, 0x54, 0x82, 0x42, 0x93, 0xaa, 0x0b, 0x16,
	0x54, 0xce, 0xe4, 0x66, 0x62, 0x25, 0x63, 0xa7, 0xf6, 0x9d, 0x42, 0x91, 0x90, 0x80, 0x4f, 0x81,
	0xc4, 0x97, 0x45, 0x33, 0xe3, 0xa1, 0x93, 0x8a, 0x66, 0x6e, 0x56, 0xec, 0x3a, 0xd5, 0xf9, 0xf9,
	0x1c, 0xdf, 0x6b, 0x5f, 0x2b, 0x2c, 0x90, 0x33, 0x15, 0x2a, 0x8d, 0x60, 0x1d, 0xd8, 0x2b, 0x15,
	0x43, 0x18, 0x8f, 0x92, 0x34, 0x49, 0x31, 0xbc, 0xf5, 0x1d, 0xcc, 0xac, 0x41, 0xc3, 0x1f, 0xc7,
	0x63, 0x18, 0x05, 0x32, 0x43, 0x93, 0x4a, 0x84, 0x60, 0x68, 0x52, 0xa9, 0x74, 0x50, 0x69, 0x3c,
	0x23, 0x1e, 0x25, 0xc6, 0x24, 0x53, 0x08, 0x0b, 0x66, 0x90, 0x8d, 0x42, 0x87, 0x36, 0x8b, 0xfd,
	0x1a, 0x62, 0xe3, 0x4e, 0x4f, 0x0b, 0x6e, 0x66, 0xb4, 0x83, 0xd0, 0x1a, 0x53, 0xa9, 0x37, 0x9b,
	0xd5, 0x0e, 0x25, 0x3a, 0xba, 0x5c, 0x9b, 0x21, 0x54, 0xf2, 0xb0, 0x59, 0x2e, 0x63, 0x54, 0x46,
	0x2f, 0xb1, 0x3e, 0x5c, 0x81, 0xae, 0xd2, 0xef, 0x10, 0xe5, 0x0e, 0xad, 0xd2, 0x49, 0x65, 0xb2,
	0xd7, 0x4c, 0x29, 0x9d, 0x63, 0xc6, 0x5e, 0x5f, 0xd4, 0xb7, 0xb3, 0xbe, 0x00, 0xbc, 0xcc, 0xc0,
	0x61, 0xbd, 0xb2, 0x1b, 0x8d, 0xe2, 0x7a, 0x61, 0x9b, 0xd5, 0xf5, 0x20, 0xdb, 0x8d, 0xea, 0x99,
	0xb4, 0x32, 0x85, 0x5c, 0xe0, 0x91, 0xa0, 0x11, 0x99, 0xef, 0x44, 0x73, 0xa0, 0x7a, 0x23, 0x3a,
	0x34, 0xf5, 0x7c, 0x1f, 0x76, 0x1b, 0xa1, 0x3f, 0xb7, 0xa1, 0x4d, 0xaa, 0xd5, 0x05, 0x7c, 0x9a,
	0x19, 0xeb, 0x03, 0xb6, 0x7f, 0x70, 0xb6, 0xd2, 0x1d, 0x25, 0x6f, 0x92, 0x14, 0xb9, 0x63, 0x2c,
	0x02, 0x3c, 0x07, 0xeb, 0x94, 0xd1, 0x7c, 0x3b, 0x58, 0x78, 0xe9, 0xfc, 0x92, 0x81, 0x97, 0x1f,
	0xeb, 0x91, 0x11, 0xed, 0x26, 0xa4, 0x3c, 0x45, 0x75, 0x86, 0x8f, 0xd9, 0x7f, 0x11, 0xe0, 0x2b,
	0x90, 0x53, 0x1c, 0xf3, 0x0d, 0x9a, 0x67, 0xa9, 0x16, 0x9b, 0x44, 0x3b, 0xbf, 0xf8, 0x47, 0x76,
	0x2f, 0x02, 0x3c, 0xc9, 0x0b, 0xd6, 0x35, 0x99, 0x46, 0x47, 0xdd, 0x62, 0x0d, 0x21, 0x6f, 0xb1,
	0x6e, 0x83, 0xec, 0xff, 0x08, 0xb0, 0x97, 0xe9, 0xea, 0x1f, 0x5b, 0x34, 0xdf, 0x1b, 0x42, 0x6c,
	0x13, 0x6d, 0x6b, 0x26, 0x49, 0xd1, 0xcd, 0x3c, 0x47, 0x2f, 0xd3, 0x7c, 0x93, 0xbe, 0xd5, 0x5e,
	0xa6, 0xc5, 0x1a, 0xdd, 0x8f, 0xf7, 0xd9, 0xbf, 0x55, 0x5d, 0xf9, 0xfa, 0x12, 0x15, 0x15, 0x22,
	0x28, 0x07, 0x76, 0x50, 0x0d, 0xec, 0xe0, 0xb5, 0x72, 0x78, 0x2e, 0xa7, 0x19, 0xf0, 0x53, 0xb6,
	0xe2, 0x6b, 0xc6, 0xd7, 0xe8, 0xd5, 0x5a, 0xb8, 0xe4, 0x87, 0xa2, 0xff, 0xfd, 0x2c, 0x49, 0xc0,
	0x15, 0x37, 0x9a, 0xda, 0x87, 0x1b, 0x64, 0xe1, 0xfa, 0x31, 0xbb, 0x1f, 0x01, 0xbe, 0xb5, 0x89,
	0xd4, 0xea, 0xb3, 0x2c, 0x1d, 0x3a, 0x34, 0x87, 0x39, 0x68, 0xa1, 0xc9, 0x45, 0xb9, 0x09, 0x93,
	0xd9, 0x18, 0x8e, 0x2e, 0x87, 0x9a, 0x7c, 0x88, 0x3d, 0x72, 0x7a, 0x70, 0xd2, 0x5f, 0x68, 0x70,
	0x59, 0x1c, 0xd6, 0x97, 0x88, 0x56, 0x0d, 0x32, 0x04, 0x72, 0xf9, 0xf3, 0x96, 0x8a, 0x9d, 0x25,
	0x6e, 0xc7, 0x6f, 0x0b, 0xfe, 0xbd, 0xc5, 0x78, 0x04, 0xf8, 0xce, 0x4c, 0x55, 0x7c, 0xdd, 0x35,
	0x66, 0x32, 0x30, 0x66, 0xe2, 0xf8, 0x0e, 0xcd, 0xb8, 0xc4, 0x7a, 0x70, 0xa5, 0xf2, 0x99, 0x22,
	0x76, 0x89, 0x11, 0x6e, 0xbb, 0xcd, 0xd8, 0x6a, 0x04, 0x78, 0x98, 0xcf, 0xd5, 0x23, 0x80, 0x21,
	0xb5, 0xac, 0x25, 0xa0, 0xa6, 0x08, 0x96, 0x3c, 0x8f, 0x0a, 0xc6, 0xf1, 0x6f, 0xe5, 0xb6, 0x8b,
	0xaf, 0xb3, 0xeb, 0x19, 0xf8, 0x7b, 0xbb, 0xb7, 0x84, 0x71, 0x89, 0x78, 0xfb, 0xf6, 0x32, 0xf6,
	0xde, 0x6c, 0x2e, 0x83, 0x74, 0x93, 0xbf, 0x91, 0xe1, 0x6b, 0x8b, 0x3d, 0xac, 0x32, 0xf4, 0x8b,
	0x87, 0x70, 0x3f, 0x8b, 0x27, 0x80, 0x8e, 0xb7, 0x97, 0x88, 0x51, 0x92, 0x4e, 0x74, 0x96, 0x49,
	0xe0, 0xa1, 0x3c, 0xc2, 0x83, 0x08, 0xf0, 0xb8, 0x7a, 0x56, 0xcb, 0x61, 0x46, 0x3c, 0x80, 0xf3,
	0x94, 0x78, 0x42, 0x0c, 0x70, 0xcb, 0xcc, 0x31, 0x96, 0xff, 0x71, 0x58, 0x3c, 0xce, 0xd4, 0xc9,
	0x74, 0x43, 0x90, 0x5f, 0x88, 0x52, 0x7e, 0x20, 0x51, 0x6e, 0xb5, 0xf8, 0x17, 0xb6, 0xda, 0x83,
	0xfc, 0xdb, 0xdb, 0x12, 0x0b, 0x5e, 0x67, 0xc4, 0x1e, 0xf5, 0xa9, 0xa8, 0x41, 0xde, 0xfe, 0x67,
	0x8b, 0x89, 0x08, 0xb0, 0x3b, 0x86, 0x78, 0x72, 0xac, 0xcb, 0xe3, 0x70, 0xa6, 0x52, 0xe8, 0x83,
	0x55, 0xe0, 0xf8, 0x73, 0x5a, 0x9a, 0x3b, 0x70, 0xf1, 0x82, 0x18, 0xec, 0x0e, 0x7e, 0xff, 0xd9,
	0xfb, 0xa7, 0x89, 0xc2, 0x71, 0x36, 0x08, 0x62, 0x93, 0x86, 0xf9, 0x5a, 0x61, 0xb5, 0x56, 0xd8,
	0xf4, 0xfb, 0x65, 0xf0, 0x4f, 0x31, 0x5a, 0x3b, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x23,
	0xa4, 0xbd, 0xea, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CfgMgmtClient is the client API for CfgMgmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CfgMgmtClient interface {
	GetVersion(ctx context.Context, in *request.VersionInfo, opts ...grpc.CallOption) (*response.VersionInfo, error)
	GetHealth(ctx context.Context, in *request.Health, opts ...grpc.CallOption) (*response.Health, error)
	GetNodesCounts(ctx context.Context, in *request.NodesCounts, opts ...grpc.CallOption) (*response.NodesCounts, error)
	GetRunsCounts(ctx context.Context, in *request.RunsCounts, opts ...grpc.CallOption) (*response.RunsCounts, error)
	GetNodeRun(ctx context.Context, in *request.NodeRun, opts ...grpc.CallOption) (*response.Run, error)
	GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*_struct.ListValue, error)
	GetRuns(ctx context.Context, in *request.Runs, opts ...grpc.CallOption) (*_struct.ListValue, error)
	GetSuggestions(ctx context.Context, in *request.Suggestion, opts ...grpc.CallOption) (*_struct.ListValue, error)
	GetOrganizations(ctx context.Context, in *request.Organizations, opts ...grpc.CallOption) (*_struct.ListValue, error)
	GetSourceFqdns(ctx context.Context, in *request.SourceFQDNS, opts ...grpc.CallOption) (*_struct.ListValue, error)
	GetAttributes(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.NodeAttribute, error)
	GetPolicyCookbooks(ctx context.Context, in *request.PolicyRevision, opts ...grpc.CallOption) (*response.PolicyCookbooks, error)
	GetEventFeed(ctx context.Context, in *request.EventFilter, opts ...grpc.CallOption) (*response.Events, error)
	GetEventTypeCounts(ctx context.Context, in *request.EventCountsFilter, opts ...grpc.CallOption) (*response.EventCounts, error)
	GetEventTaskCounts(ctx context.Context, in *request.EventCountsFilter, opts ...grpc.CallOption) (*response.EventCounts, error)
	GetEventStringBuckets(ctx context.Context, in *request.EventStrings, opts ...grpc.CallOption) (*response.EventStrings, error)
	GetInventoryNodes(ctx context.Context, in *request.InventoryNodes, opts ...grpc.CallOption) (*response.InventoryNodes, error)
	NodeExport(ctx context.Context, in *request.NodeExport, opts ...grpc.CallOption) (CfgMgmt_NodeExportClient, error)
	ReportExport(ctx context.Context, in *request.ReportExport, opts ...grpc.CallOption) (CfgMgmt_ReportExportClient, error)
	GetCheckInCountsTimeSeries(ctx context.Context, in *request.CheckInCountsTimeSeries, opts ...grpc.CallOption) (*response.CheckInCountsTimeSeries, error)
}

type cfgMgmtClient struct {
	cc grpc.ClientConnInterface
}

func NewCfgMgmtClient(cc grpc.ClientConnInterface) CfgMgmtClient {
	return &cfgMgmtClient{cc}
}

func (c *cfgMgmtClient) GetVersion(ctx context.Context, in *request.VersionInfo, opts ...grpc.CallOption) (*response.VersionInfo, error) {
	out := new(response.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetHealth(ctx context.Context, in *request.Health, opts ...grpc.CallOption) (*response.Health, error) {
	out := new(response.Health)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetNodesCounts(ctx context.Context, in *request.NodesCounts, opts ...grpc.CallOption) (*response.NodesCounts, error) {
	out := new(response.NodesCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetNodesCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetRunsCounts(ctx context.Context, in *request.RunsCounts, opts ...grpc.CallOption) (*response.RunsCounts, error) {
	out := new(response.RunsCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetRunsCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetNodeRun(ctx context.Context, in *request.NodeRun, opts ...grpc.CallOption) (*response.Run, error) {
	out := new(response.Run)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetNodeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetRuns(ctx context.Context, in *request.Runs, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetSuggestions(ctx context.Context, in *request.Suggestion, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetOrganizations(ctx context.Context, in *request.Organizations, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetSourceFqdns(ctx context.Context, in *request.SourceFQDNS, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetSourceFqdns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetAttributes(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.NodeAttribute, error) {
	out := new(response.NodeAttribute)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetPolicyCookbooks(ctx context.Context, in *request.PolicyRevision, opts ...grpc.CallOption) (*response.PolicyCookbooks, error) {
	out := new(response.PolicyCookbooks)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetPolicyCookbooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetEventFeed(ctx context.Context, in *request.EventFilter, opts ...grpc.CallOption) (*response.Events, error) {
	out := new(response.Events)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetEventFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetEventTypeCounts(ctx context.Context, in *request.EventCountsFilter, opts ...grpc.CallOption) (*response.EventCounts, error) {
	out := new(response.EventCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetEventTypeCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetEventTaskCounts(ctx context.Context, in *request.EventCountsFilter, opts ...grpc.CallOption) (*response.EventCounts, error) {
	out := new(response.EventCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetEventTaskCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetEventStringBuckets(ctx context.Context, in *request.EventStrings, opts ...grpc.CallOption) (*response.EventStrings, error) {
	out := new(response.EventStrings)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetEventStringBuckets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) GetInventoryNodes(ctx context.Context, in *request.InventoryNodes, opts ...grpc.CallOption) (*response.InventoryNodes, error) {
	out := new(response.InventoryNodes)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetInventoryNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtClient) NodeExport(ctx context.Context, in *request.NodeExport, opts ...grpc.CallOption) (CfgMgmt_NodeExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CfgMgmt_serviceDesc.Streams[0], "/chef.automate.domain.cfgmgmt.service.CfgMgmt/NodeExport", opts...)
	if err != nil {
		return nil, err
	}
	x := &cfgMgmtNodeExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CfgMgmt_NodeExportClient interface {
	Recv() (*response.ExportData, error)
	grpc.ClientStream
}

type cfgMgmtNodeExportClient struct {
	grpc.ClientStream
}

func (x *cfgMgmtNodeExportClient) Recv() (*response.ExportData, error) {
	m := new(response.ExportData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cfgMgmtClient) ReportExport(ctx context.Context, in *request.ReportExport, opts ...grpc.CallOption) (CfgMgmt_ReportExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CfgMgmt_serviceDesc.Streams[1], "/chef.automate.domain.cfgmgmt.service.CfgMgmt/ReportExport", opts...)
	if err != nil {
		return nil, err
	}
	x := &cfgMgmtReportExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CfgMgmt_ReportExportClient interface {
	Recv() (*response.ReportExportData, error)
	grpc.ClientStream
}

type cfgMgmtReportExportClient struct {
	grpc.ClientStream
}

func (x *cfgMgmtReportExportClient) Recv() (*response.ReportExportData, error) {
	m := new(response.ReportExportData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cfgMgmtClient) GetCheckInCountsTimeSeries(ctx context.Context, in *request.CheckInCountsTimeSeries, opts ...grpc.CallOption) (*response.CheckInCountsTimeSeries, error) {
	out := new(response.CheckInCountsTimeSeries)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetCheckInCountsTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CfgMgmtServer is the server API for CfgMgmt service.
type CfgMgmtServer interface {
	GetVersion(context.Context, *request.VersionInfo) (*response.VersionInfo, error)
	GetHealth(context.Context, *request.Health) (*response.Health, error)
	GetNodesCounts(context.Context, *request.NodesCounts) (*response.NodesCounts, error)
	GetRunsCounts(context.Context, *request.RunsCounts) (*response.RunsCounts, error)
	GetNodeRun(context.Context, *request.NodeRun) (*response.Run, error)
	GetNodes(context.Context, *request.Nodes) (*_struct.ListValue, error)
	GetRuns(context.Context, *request.Runs) (*_struct.ListValue, error)
	GetSuggestions(context.Context, *request.Suggestion) (*_struct.ListValue, error)
	GetOrganizations(context.Context, *request.Organizations) (*_struct.ListValue, error)
	GetSourceFqdns(context.Context, *request.SourceFQDNS) (*_struct.ListValue, error)
	GetAttributes(context.Context, *request.Node) (*response.NodeAttribute, error)
	GetPolicyCookbooks(context.Context, *request.PolicyRevision) (*response.PolicyCookbooks, error)
	GetEventFeed(context.Context, *request.EventFilter) (*response.Events, error)
	GetEventTypeCounts(context.Context, *request.EventCountsFilter) (*response.EventCounts, error)
	GetEventTaskCounts(context.Context, *request.EventCountsFilter) (*response.EventCounts, error)
	GetEventStringBuckets(context.Context, *request.EventStrings) (*response.EventStrings, error)
	GetInventoryNodes(context.Context, *request.InventoryNodes) (*response.InventoryNodes, error)
	NodeExport(*request.NodeExport, CfgMgmt_NodeExportServer) error
	ReportExport(*request.ReportExport, CfgMgmt_ReportExportServer) error
	GetCheckInCountsTimeSeries(context.Context, *request.CheckInCountsTimeSeries) (*response.CheckInCountsTimeSeries, error)
}

// UnimplementedCfgMgmtServer can be embedded to have forward compatible implementations.
type UnimplementedCfgMgmtServer struct {
}

func (*UnimplementedCfgMgmtServer) GetVersion(ctx context.Context, req *request.VersionInfo) (*response.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedCfgMgmtServer) GetHealth(ctx context.Context, req *request.Health) (*response.Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (*UnimplementedCfgMgmtServer) GetNodesCounts(ctx context.Context, req *request.NodesCounts) (*response.NodesCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodesCounts not implemented")
}
func (*UnimplementedCfgMgmtServer) GetRunsCounts(ctx context.Context, req *request.RunsCounts) (*response.RunsCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunsCounts not implemented")
}
func (*UnimplementedCfgMgmtServer) GetNodeRun(ctx context.Context, req *request.NodeRun) (*response.Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeRun not implemented")
}
func (*UnimplementedCfgMgmtServer) GetNodes(ctx context.Context, req *request.Nodes) (*_struct.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (*UnimplementedCfgMgmtServer) GetRuns(ctx context.Context, req *request.Runs) (*_struct.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuns not implemented")
}
func (*UnimplementedCfgMgmtServer) GetSuggestions(ctx context.Context, req *request.Suggestion) (*_struct.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestions not implemented")
}
func (*UnimplementedCfgMgmtServer) GetOrganizations(ctx context.Context, req *request.Organizations) (*_struct.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizations not implemented")
}
func (*UnimplementedCfgMgmtServer) GetSourceFqdns(ctx context.Context, req *request.SourceFQDNS) (*_struct.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceFqdns not implemented")
}
func (*UnimplementedCfgMgmtServer) GetAttributes(ctx context.Context, req *request.Node) (*response.NodeAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttributes not implemented")
}
func (*UnimplementedCfgMgmtServer) GetPolicyCookbooks(ctx context.Context, req *request.PolicyRevision) (*response.PolicyCookbooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyCookbooks not implemented")
}
func (*UnimplementedCfgMgmtServer) GetEventFeed(ctx context.Context, req *request.EventFilter) (*response.Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventFeed not implemented")
}
func (*UnimplementedCfgMgmtServer) GetEventTypeCounts(ctx context.Context, req *request.EventCountsFilter) (*response.EventCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventTypeCounts not implemented")
}
func (*UnimplementedCfgMgmtServer) GetEventTaskCounts(ctx context.Context, req *request.EventCountsFilter) (*response.EventCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventTaskCounts not implemented")
}
func (*UnimplementedCfgMgmtServer) GetEventStringBuckets(ctx context.Context, req *request.EventStrings) (*response.EventStrings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventStringBuckets not implemented")
}
func (*UnimplementedCfgMgmtServer) GetInventoryNodes(ctx context.Context, req *request.InventoryNodes) (*response.InventoryNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryNodes not implemented")
}
func (*UnimplementedCfgMgmtServer) NodeExport(req *request.NodeExport, srv CfgMgmt_NodeExportServer) error {
	return status.Errorf(codes.Unimplemented, "method NodeExport not implemented")
}
func (*UnimplementedCfgMgmtServer) ReportExport(req *request.ReportExport, srv CfgMgmt_ReportExportServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportExport not implemented")
}
func (*UnimplementedCfgMgmtServer) GetCheckInCountsTimeSeries(ctx context.Context, req *request.CheckInCountsTimeSeries) (*response.CheckInCountsTimeSeries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckInCountsTimeSeries not implemented")
}

func RegisterCfgMgmtServer(s *grpc.Server, srv CfgMgmtServer) {
	s.RegisterService(&_CfgMgmt_serviceDesc, srv)
}

func _CfgMgmt_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.VersionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetVersion(ctx, req.(*request.VersionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Health)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetHealth(ctx, req.(*request.Health))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetNodesCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodesCounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetNodesCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetNodesCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetNodesCounts(ctx, req.(*request.NodesCounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetRunsCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RunsCounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetRunsCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetRunsCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetRunsCounts(ctx, req.(*request.RunsCounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetNodeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodeRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetNodeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetNodeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetNodeRun(ctx, req.(*request.NodeRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Nodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetNodes(ctx, req.(*request.Nodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Runs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetRuns(ctx, req.(*request.Runs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Suggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetSuggestions(ctx, req.(*request.Suggestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Organizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetOrganizations(ctx, req.(*request.Organizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetSourceFqdns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SourceFQDNS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetSourceFqdns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetSourceFqdns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetSourceFqdns(ctx, req.(*request.SourceFQDNS))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetAttributes(ctx, req.(*request.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetPolicyCookbooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.PolicyRevision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetPolicyCookbooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetPolicyCookbooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetPolicyCookbooks(ctx, req.(*request.PolicyRevision))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetEventFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.EventFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetEventFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetEventFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetEventFeed(ctx, req.(*request.EventFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetEventTypeCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.EventCountsFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetEventTypeCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetEventTypeCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetEventTypeCounts(ctx, req.(*request.EventCountsFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetEventTaskCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.EventCountsFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetEventTaskCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetEventTaskCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetEventTaskCounts(ctx, req.(*request.EventCountsFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetEventStringBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.EventStrings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetEventStringBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetEventStringBuckets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetEventStringBuckets(ctx, req.(*request.EventStrings))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_GetInventoryNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.InventoryNodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetInventoryNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetInventoryNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetInventoryNodes(ctx, req.(*request.InventoryNodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmt_NodeExport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(request.NodeExport)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CfgMgmtServer).NodeExport(m, &cfgMgmtNodeExportServer{stream})
}

type CfgMgmt_NodeExportServer interface {
	Send(*response.ExportData) error
	grpc.ServerStream
}

type cfgMgmtNodeExportServer struct {
	grpc.ServerStream
}

func (x *cfgMgmtNodeExportServer) Send(m *response.ExportData) error {
	return x.ServerStream.SendMsg(m)
}

func _CfgMgmt_ReportExport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(request.ReportExport)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CfgMgmtServer).ReportExport(m, &cfgMgmtReportExportServer{stream})
}

type CfgMgmt_ReportExportServer interface {
	Send(*response.ReportExportData) error
	grpc.ServerStream
}

type cfgMgmtReportExportServer struct {
	grpc.ServerStream
}

func (x *cfgMgmtReportExportServer) Send(m *response.ReportExportData) error {
	return x.ServerStream.SendMsg(m)
}

func _CfgMgmt_GetCheckInCountsTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CheckInCountsTimeSeries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServer).GetCheckInCountsTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmt/GetCheckInCountsTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServer).GetCheckInCountsTimeSeries(ctx, req.(*request.CheckInCountsTimeSeries))
	}
	return interceptor(ctx, in, info, handler)
}

var _CfgMgmt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.cfgmgmt.service.CfgMgmt",
	HandlerType: (*CfgMgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _CfgMgmt_GetVersion_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _CfgMgmt_GetHealth_Handler,
		},
		{
			MethodName: "GetNodesCounts",
			Handler:    _CfgMgmt_GetNodesCounts_Handler,
		},
		{
			MethodName: "GetRunsCounts",
			Handler:    _CfgMgmt_GetRunsCounts_Handler,
		},
		{
			MethodName: "GetNodeRun",
			Handler:    _CfgMgmt_GetNodeRun_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _CfgMgmt_GetNodes_Handler,
		},
		{
			MethodName: "GetRuns",
			Handler:    _CfgMgmt_GetRuns_Handler,
		},
		{
			MethodName: "GetSuggestions",
			Handler:    _CfgMgmt_GetSuggestions_Handler,
		},
		{
			MethodName: "GetOrganizations",
			Handler:    _CfgMgmt_GetOrganizations_Handler,
		},
		{
			MethodName: "GetSourceFqdns",
			Handler:    _CfgMgmt_GetSourceFqdns_Handler,
		},
		{
			MethodName: "GetAttributes",
			Handler:    _CfgMgmt_GetAttributes_Handler,
		},
		{
			MethodName: "GetPolicyCookbooks",
			Handler:    _CfgMgmt_GetPolicyCookbooks_Handler,
		},
		{
			MethodName: "GetEventFeed",
			Handler:    _CfgMgmt_GetEventFeed_Handler,
		},
		{
			MethodName: "GetEventTypeCounts",
			Handler:    _CfgMgmt_GetEventTypeCounts_Handler,
		},
		{
			MethodName: "GetEventTaskCounts",
			Handler:    _CfgMgmt_GetEventTaskCounts_Handler,
		},
		{
			MethodName: "GetEventStringBuckets",
			Handler:    _CfgMgmt_GetEventStringBuckets_Handler,
		},
		{
			MethodName: "GetInventoryNodes",
			Handler:    _CfgMgmt_GetInventoryNodes_Handler,
		},
		{
			MethodName: "GetCheckInCountsTimeSeries",
			Handler:    _CfgMgmt_GetCheckInCountsTimeSeries_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NodeExport",
			Handler:       _CfgMgmt_NodeExport_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReportExport",
			Handler:       _CfgMgmt_ReportExport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/interservice/cfgmgmt/service/cfgmgmt.proto",
}
